# yaml-language-server: $schema=https://schemas.brigade.sh/schemas-v2/project.json
apiVersion: brigade.sh/v2
kind: Project
metadata:
  id: groups
description: Demonstrates a complex pipeline using groups
spec:
  eventSubscriptions:
  - source: brigade.sh/cli
    types:
    - exec
  workerTemplate:
    # logLevel: DEBUG
    defaultConfigFiles:
      brigade.js: | 
        const { events, Job } = require("@brigadecore/brigadier");

        events.on("brigade.sh/cli", "exec", async event => {
          let job1 = new Job("my-first-job", "debian:latest", event);
          job1.primaryContainer.command = ["echo"];
          job1.primaryContainer.arguments = ["My first job!"];

          let job2 = new Job("my-second-job", "debian:latest", event);
          job2.primaryContainer.command = ["echo"];
          job2.primaryContainer.arguments = ["My second job!"];
          
          let jobA = new Job("my-a-job", "debian:latest", event);
          jobA.primaryContainer.command = ["echo"];
          jobA.primaryContainer.arguments = ["My A job!"];

          let jobB = new Job("my-b-job", "debian:latest", event);
          jobB.primaryContainer.command = ["echo"];
          jobB.primaryContainer.arguments = ["My B job!"];

          await Job.concurrent(
            Job.sequence(job1, job2),
            Job.sequence(jobA, jobB)
          ).run();
        });

        events.process();
