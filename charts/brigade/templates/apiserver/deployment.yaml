apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "brigade.apiserver.fullname" . }}
  labels:
    {{- include "brigade.labels" . | nindent 4 }}
    {{- include "brigade.apiserver.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.apiserver.replicas }}
  selector:
    matchLabels:
      {{- include "brigade.selectorLabels" . | nindent 6 }}
      {{- include "brigade.apiserver.labels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "brigade.selectorLabels" . | nindent 8 }}
        {{- include "brigade.apiserver.labels" . | nindent 8 }}
      annotations:
        checksum/apiserver-secret: {{ include (print $.Template.BasePath "/apiserver/secret.yaml") . | sha256sum }}
        {{- if .Values.apiserver.tls.enabled }}
        checksum/cert-secret: {{ include (print $.Template.BasePath "/apiserver/cert-secret.yaml") . | sha256sum }}
        {{- end }}
    spec:
      serviceAccount: {{ include "brigade.apiserver.fullname" . }}
      containers:
      - name: apiserver
        image: {{ .Values.apiserver.image.repository }}:{{ default .Chart.AppVersion .Values.apiserver.image.tag }}
        imagePullPolicy: {{ .Values.apiserver.image.pullPolicy }}
        args:
        - --logtostderr=true
        env:
        - name: BRIGADE_ID
          value: {{ .Release.Namespace }}.{{ .Release.Name }}
        - name: API_ADDRESS
          {{- if .Values.apiserver.tls.enabled }}
          value: https://{{ include "brigade.apiserver.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local
          {{- else }}
          value: http://{{ include "brigade.apiserver.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local
          {{- end }}
        - name: ROOT_USER_ENABLED
          value: {{ quote .Values.apiserver.rootUser.enabled }}
        {{- if .Values.apiserver.rootUser.enabled }}
        - name: ROOT_USER_SESSION_TTL
          value: {{ .Values.apiserver.rootUser.sessionTTL }}
        - name: ROOT_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "brigade.apiserver.fullname" . }}
              key: root-user-password
        {{- end }}
        - name: THIRD_PARTY_AUTH_STRATEGY
          value: {{ quote .Values.apiserver.thirdPartyAuth.strategy }}
        {{- if not (eq .Values.apiserver.thirdPartyAuth.strategy "disabled") }}
        - name: USER_SESSION_TTL
          value: {{ .Values.apiserver.thirdPartyAuth.userSessionTTL }}
        - name: ADMIN_USER_IDS
          value: {{ join "," .Values.apiserver.thirdPartyAuth.admins }}
        {{- end }}
        {{- if eq .Values.apiserver.thirdPartyAuth.strategy "oidc" }}
        - name: OIDC_PROVIDER_URL
          value: {{ .Values.apiserver.thirdPartyAuth.oidc.providerURL }}
        - name: OIDC_CLIENT_ID
          value: {{ .Values.apiserver.thirdPartyAuth.oidc.clientID }}
        - name: OIDC_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ include "brigade.apiserver.fullname" . }}
              key: oidc-client-secret
        - name: OIDC_REDIRECT_URL_BASE
          {{- if or (and (not .Values.apiserver.ingress.enabled) .Values.apiserver.tls.enabled) (and .Values.apiserver.ingress.enabled .Values.apiserver.ingress.tls.enabled) }}
          value: https://{{ .Values.apiserver.host }}
          {{- else }}
          value: http://{{ .Values.apiserver.host }}
          {{- end }}
        {{- end }}
        {{- if eq .Values.apiserver.thirdPartyAuth.strategy "github" }}
        - name: GITHUB_CLIENT_ID
          value: {{ .Values.apiserver.thirdPartyAuth.github.clientID }}
        - name: GITHUB_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ include "brigade.apiserver.fullname" . }}
              key: github-client-secret
        - name: GITHUB_ALLOWED_ORGANIZATIONS
          value: {{ join "," .Values.apiserver.thirdPartyAuth.github.allowedOrganizations }}
        {{- end }}
        - name: SCHEDULER_TOKEN
          valueFrom:
            secretKeyRef:
              name: {{ include "brigade.scheduler.fullname" . }}
              key: api-token
        - name: OBSERVER_TOKEN
          valueFrom:
            secretKeyRef:
              name: {{ include "brigade.observer.fullname" . }}
              key: api-token
        - name: TLS_ENABLED
          value: {{ quote .Values.apiserver.tls.enabled }}
        {{- if .Values.apiserver.tls.enabled }}
        - name: TLS_CERT_PATH
          value: /app/certs/tls.crt
        - name: TLS_KEY_PATH
          value: /app/certs/tls.key
        {{- end }}
        
        {{- if .Values.mongodb.enabled }}
        {{- if eq .Values.mongodb.architecture "replicaset" }}
        {{- $replicaCount := int .Values.mongodb.replicaCount }}
        {{- $fullname := include "call-nested" (list . "mongodb" "mongodb.fullname") }}
        {{- $releaseNamespace := .Release.Namespace }}
        {{- $port := .Values.mongodb.service.port }}
        {{- $hostList := list }}
        {{- range $e, $i := until $replicaCount }}
        {{- $hostList = append $hostList (printf "%s-%d.%s-headless.%s.svc.cluster.local:%g" $fullname $i $fullname $releaseNamespace $port) }}
        {{- end }}
        - name: DATABASE_HOSTS
          value: {{ join "," $hostList }}
        - name: DATABASE_REPLICA_SET
          value: {{ .Values.mongodb.replicaSetName }}
        {{- else }}
        - name: DATABASE_HOSTS
          value: {{ include "call-nested" (list . "mongodb" "mongodb.fullname") }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.mongodb.service.port }}
        {{- end }}
        - name: DATABASE_NAME
          value: {{ .Values.mongodb.auth.database }}
        - name: DATABASE_USERNAME
          value: {{ .Values.mongodb.auth.username }}
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "call-nested" (list . "mongodb" "mongodb.fullname") }}
              key: mongodb-password
        {{- else }}
        - name: DATABASE_CONNECTION_STRING
          valueFrom:
            secretKeyRef:
              name: {{ include "brigade.apiserver.fullname" . }}
              key: mongodb-connection-string
        - name: DATABASE_NAME
          value: {{ .Values.externalMongodb.database }}
        {{- end }}
        - name: AMQP_ADDRESS
          value: amqp://{{ include "brigade.artemis.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:5672
        - name: AMQP_USERNAME
          value: {{ .Values.artemis.username }}
        - name: AMQP_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "brigade.artemis.fullname" . }}
              key: password
        - name: GIT_INITIALIZER_IMAGE
          value: {{ .Values.gitInitializer.image.repository }}:{{ default .Chart.AppVersion .Values.gitInitializer.image.tag }}
        - name: GIT_INITIALIZER_IMAGE_PULL_POLICY
          value: {{ .Values.gitInitializer.image.pullPolicy }}
        - name: DEFAULT_WORKER_IMAGE
          value: {{ .Values.worker.image.repository }}:{{ default .Chart.AppVersion .Values.worker.image.tag }}
        - name: DEFAULT_WORKER_IMAGE_PULL_POLICY
          value: {{ .Values.worker.image.pullPolicy }}
        - name: WORKSPACE_STORAGE_CLASS
          value: {{ .Values.worker.workspaceStorageClass }}
        {{- if .Values.worker.nodeSelector }}
        - name: NODE_SELECTOR_KEY
          value: {{ .Values.worker.nodeSelector.key }}
        - name: NODE_SELECTOR_VALUE
          value: {{ .Values.worker.nodeSelector.value }}
        {{- end }}
        {{- if .Values.worker.toleration }}
        - name: TOLERATION_KEY
          value: {{ .Values.worker.toleration.key }}
        - name: TOLERATION_VALUE
          value: {{ .Values.worker.toleration.value }}
        {{- end }}
        ports:
        - name: healthz
          containerPort: 8080
        livenessProbe:
          httpGet:
            port: healthz
            path: /healthz
            {{- if .Values.apiserver.tls.enabled }}
            scheme: HTTPS
            {{- end }}
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            port: healthz
            path: /healthz
            {{- if .Values.apiserver.tls.enabled }}
            scheme: HTTPS
            {{- end }}
          initialDelaySeconds: 10
          periodSeconds: 10
        startupProbe:
          httpGet:
            port: healthz
            path: /healthz
            {{- if .Values.apiserver.tls.enabled }}
            scheme: HTTPS
            {{- end }}
          failureThreshold: 30
          periodSeconds: 10
        {{- if .Values.apiserver.tls.enabled }}
        volumeMounts:
        - name: cert
          mountPath: /app/certs
          readOnly: true
        {{- end }}
      {{- if .Values.apiserver.tls.enabled }}
      volumes:
      - name: cert
        secret:
          secretName: {{ include "brigade.apiserver.fullname" . }}-cert
      {{- end }}
      {{- with .Values.apiserver.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.apiserver.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
