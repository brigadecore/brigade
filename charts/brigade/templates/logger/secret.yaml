apiVersion: v1
kind: Secret
metadata:
  name: {{ include "brigade.logger.fullname" . }}
  labels:
    {{- include "brigade.labels" . | nindent 4 }}
    {{- include "brigade.logger.labels" . | nindent 4 }}
type: Opaque
stringData:
  fluent.conf: |
    <source>
      @type tail
      path /var/log/containers/*.log
      pos_file /var/log/brigade-fluentd-containers.log.pos
      tag kube.*
      read_from_head true
      refresh_interval 15
      <parse>
        @type multi_format
        <pattern>
          format json
          time_key time
          time_format %Y-%m-%dT%H:%M:%S.%NZ
        </pattern>
        <pattern>
          format /^(?<time>.+) (?<stream>stdout|stderr) [^ ]* (?<log>.*)$/
          time_format %Y-%m-%dT%H:%M:%S.%N%:z
        </pattern>
      </parse>
    </source>

    <filter kube.var.log.containers.**.log>
      @type kubernetes_metadata
    </filter>

    <match kube.var.log.containers.**.log>
      @type rewrite_tag_filter
      <rule>
        key     $.kubernetes.labels.brigade_sh/id
        pattern /^{{ .Release.Namespace }}\.{{ .Release.Name }}$/
        tag     workerload
      </rule>
    </match>

    <match workerload>
      @type rewrite_tag_filter
      <rule>
        key     $.kubernetes.labels.brigade_sh/component
        pattern /^worker$/
        tag     worker
      </rule>
      <rule>
        key     $.kubernetes.labels.brigade_sh/component
        pattern /^job$/
        tag     job
      </rule>
    </match>

    <filter worker>
      @type record_transformer
      enable_ruby
      renew_record true
      <record>
        # strip tailing whitespace from log
        log ${record["log"].rstrip}
        component ${record.dig("kubernetes", "labels", "brigade_sh/component")}
        event     ${record.dig("kubernetes", "labels", "brigade_sh/event")}
        project   ${record.dig("kubernetes", "labels", "brigade_sh/project")}
        container ${record.dig("kubernetes", "container_name")}
      </record>
      keep_keys component,event,project,worker,container,time,log
    </filter>

    <filter job>
      @type record_transformer
      enable_ruby
      renew_record true
      <record>
        # strip tailing whitespace from log
        log ${record["log"].rstrip}
        component ${record.dig("kubernetes", "labels", "brigade_sh/component")}
        event     ${record.dig("kubernetes", "labels", "brigade_sh/event")}
        project   ${record.dig("kubernetes", "labels", "brigade_sh/project")}
        job       ${record.dig("kubernetes", "labels", "brigade_sh/job")}
        container ${record.dig("kubernetes", "container_name")}
      </record>
      keep_keys component,event,project,worker,job,container,time,log
    </filter>

    <match worker job>
      @type mongo

      {{- if .Values.mongodb.enabled }}
      {{- if eq .Values.mongodb.architecture "replicaset" }}
      {{- $replicaCount := int .Values.mongodb.replicaCount }}
      {{- $fullname := include "call-nested" (list . "mongodb" "mongodb.fullname") }}
      {{- $releaseNamespace := .Release.Namespace }}
      {{- range $e, $i := until $replicaCount }}
      host {{ $fullname }}-{{ $i }}.{{ $fullname }}-headless.{{ $releaseNamespace }}.svc.cluster.local
      {{- end }}
      {{- else }}
      host {{ include "call-nested" (list . "mongodb" "mongodb.fullname") }}.{{ .Release.Namespace }}.svc.cluster.local
      {{- end }}
      port 27017
      database {{ index .Values.mongodb.auth.databases 0 }}
      user {{ index .Values.mongodb.auth.usernames 0 }}
      password {{ index .Values.mongodb.auth.passwords 0 }}
      {{- else }}
      connection_string {{ .Values.externalMongodb.connectionString }}
      database {{ .Values.externalMongodb.databaseName }}
      {{- end }}

      collection logs

      time_key time

      <buffer>
        @type file
        path /fluentd/log/buffer
        flush_interval 5s
      </buffer>
    </match>
